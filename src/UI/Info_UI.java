/*******************************************************************************
*   Project: LoL Assembler
*
*   File: Info_UI.java
*
*   Description: @TODO
*
*   Notes: N/A
*
*   Contact: Alberto Martin Cajal, amartin.glimpse23<AT>gmail.com
*
*   URL: https://github.com/amcajal/lol_assembler
*
*   License: GNU GPL v3.0
*
*   Copyright (C) 2018 Alberto Martin Cajal
*
*   This file is part of LoL Assembler project.
*
*   LoL Assembler is free software: you can redistribute it and/or modify
*   it under the terms of the GNU General Public License as published by
*   the Free Software Foundation, either version 3 of the License, or
*   (at your option) any later version.
*
*   LoL Assembler is distributed in the hope that it will be useful,
*   but WITHOUT ANY WARRANTY; without even the implied warranty of
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*   GNU General Public License for more details.
*
*   You should have received a copy of the GNU General Public License
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.
*******************************************************************************/


package UI;

import SourceCode.*;
import java.awt.Color;
import java.awt.Image;
import java.awt.Insets;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;

/**
 *
 * @author Alberto
 */
public class Info_UI extends javax.swing.JFrame {

    Information information;

    /** Creates new form Info_UI */
    public Info_UI(Information info) {
        initComponents();

        Image i;
        try {
            i = ImageIO.read(getClass().getResource("/Images/lol_assembler_icon.png"));
            setIconImage(i);
        } catch (IOException ex) {
            Logger.getLogger(LoL_assembly_UI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        Color bgc = new Color(5,23,37);
        getContentPane().setBackground(bgc);

        this.setTitle ("Information Window - LoL Assembler");
        
        infoTextArea.setMargin(new Insets(15,25,25,25)); // Apply margins
        infoTextArea.setEditable(false);

        this.information = info;

        Iterator it = information.getChampionList().entrySet().iterator();
        //Iterator it = info.getChampionList().entrySet().iterator();

        while (it.hasNext()) {
            Map.Entry pair = (Map.Entry)it.next();
            infoComboBox.addItem(pair.getKey());
            //System.out.println(pair.getKey() + ":" + pair.getValue());
        }

        infoComboBox.setEditable(true);
        AutoCompletion.enable(infoComboBox);

        setDefaultCloseOperation(Info_UI.DISPOSE_ON_CLOSE);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        infoTextArea = new javax.swing.JTextArea();
        infoExitButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        infoComboBox = new javax.swing.JComboBox();
        infoShowButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        infoHotOnesButton = new javax.swing.JButton();
        infoLovedOnesButton = new javax.swing.JButton();
        infoHatedOnesButton = new javax.swing.JButton();
        infoCombosButton = new javax.swing.JButton();
        infoPositionsButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(5, 23, 37));

        infoTextArea.setBackground(new java.awt.Color(39, 40, 34));
        infoTextArea.setColumns(20);
        infoTextArea.setForeground(new java.awt.Color(255, 255, 0));
        infoTextArea.setRows(5);
        jScrollPane1.setViewportView(infoTextArea);

        infoExitButton.setBackground(new java.awt.Color(30, 68, 116));
        infoExitButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        infoExitButton.setForeground(new java.awt.Color(255, 255, 255));
        infoExitButton.setText("Exit");
        infoExitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                infoExitButtonActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(25, 43, 57));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "General information", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11), new java.awt.Color(255, 255, 255))); // NOI18N

        infoComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                infoComboBoxActionPerformed(evt);
            }
        });

        infoShowButton.setBackground(new java.awt.Color(184, 8, 12));
        infoShowButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        infoShowButton.setForeground(new java.awt.Color(255, 255, 255));
        infoShowButton.setText("Show");
        infoShowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                infoShowButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(infoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(infoShowButton)
                .addContainerGap(14, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(infoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(infoShowButton))
                .addContainerGap(37, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(25, 43, 57));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Special information", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11), new java.awt.Color(255, 255, 255))); // NOI18N

        infoHotOnesButton.setBackground(new java.awt.Color(54, 109, 90));
        infoHotOnesButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        infoHotOnesButton.setForeground(new java.awt.Color(255, 255, 255));
        infoHotOnesButton.setText("Hot Ones");
        infoHotOnesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                infoHotOnesButtonActionPerformed(evt);
            }
        });

        infoLovedOnesButton.setBackground(new java.awt.Color(54, 109, 90));
        infoLovedOnesButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        infoLovedOnesButton.setForeground(new java.awt.Color(255, 255, 255));
        infoLovedOnesButton.setText("Loved Ones");
        infoLovedOnesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                infoLovedOnesButtonActionPerformed(evt);
            }
        });

        infoHatedOnesButton.setBackground(new java.awt.Color(54, 109, 90));
        infoHatedOnesButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        infoHatedOnesButton.setForeground(new java.awt.Color(255, 255, 255));
        infoHatedOnesButton.setText("Hated Ones");
        infoHatedOnesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                infoHatedOnesButtonActionPerformed(evt);
            }
        });

        infoCombosButton.setBackground(new java.awt.Color(54, 109, 90));
        infoCombosButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        infoCombosButton.setForeground(new java.awt.Color(255, 255, 255));
        infoCombosButton.setText("Combos");
        infoCombosButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                infoCombosButtonActionPerformed(evt);
            }
        });

        infoPositionsButton.setBackground(new java.awt.Color(54, 109, 90));
        infoPositionsButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        infoPositionsButton.setForeground(new java.awt.Color(255, 255, 255));
        infoPositionsButton.setText("Positions");
        infoPositionsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                infoPositionsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(infoHatedOnesButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(infoCombosButton, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(infoHotOnesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(infoLovedOnesButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(infoPositionsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(10, 10, 10))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(infoHotOnesButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(infoLovedOnesButton)
                        .addComponent(infoPositionsButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(infoHatedOnesButton)
                    .addComponent(infoCombosButton))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 705, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(infoExitButton, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 97, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(infoExitButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 347, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void infoComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_infoComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_infoComboBoxActionPerformed

    private void infoShowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_infoShowButtonActionPerformed
        // TODO add your handling code here:

        String champion = infoComboBox.getSelectedItem().toString();
        
        String tags = "";
        
        // Community
        String[] strong = null;
        String[] weak = null;
        String[] even = null;
        String[] well = null;
        
        // Personal
        String[] strongP = null;
        String[] weakP = null;
        String[] evenP = null;
        String[] wellP = null;

        // Positions
        String hotPosition = "";
        String lovedPosition = "";
        String hatedPosition = "";
        
        ArrayList<String> combosP = new ArrayList<String>();

        if (information.getStrongAgainst().containsKey(champion)) {
            strong = information.getStrongAgainst().get(champion).split("&&");
        }
        
        if (information.getWeakAgainst().containsKey(champion)) {
            weak = information.getWeakAgainst().get(champion).split("&&");
        }
        
        if (information.getEvenAgainst().containsKey(champion)) {
            even = information.getEvenAgainst().get(champion).split("&&");
        }
        
        if (information.getWorksWell().containsKey(champion)) {
            well = information.getWorksWell().get(champion).split("&&");
        }      

        if ((!information.getHotOnes().isEmpty()) && (information.getHotOnes().containsKey(champion))) {
            tags = tags + "Hot - ";
            hotPosition = information.getHotOnes().get(champion);
        }
        
        if ((!information.getLovedOnes().isEmpty()) && (information.getLovedOnes().containsKey(champion))) {
            tags = tags + "Loved - ";
            lovedPosition = information.getLovedOnes().get(champion);
        }       
        
        if ((!information.getHatedOnes().isEmpty()) && (information.getHatedOnes().containsKey(champion))) {
            tags = tags + "Hated - ";
            hatedPosition = information.getHatedOnes().get(champion);
        }
        
        if ((!information.getPersonalStrong().isEmpty()) && (information.getPersonalStrong().containsKey(champion))) {
            strongP = information.getPersonalStrong().get(champion).split("&&");
        }
        
        if ((!information.getPersonalWeak().isEmpty()) && (information.getPersonalWeak().containsKey(champion))) {
            weakP = information.getPersonalWeak().get(champion).split("&&");
        }
        
        if ((!information.getPersonalEven().isEmpty()) && (information.getPersonalEven().containsKey(champion))) {
            evenP = information.getPersonalEven().get(champion).split("&&");
        }
        
        if ((!information.getPersonalWell().isEmpty()) && (information.getPersonalWell().containsKey(champion))) {
            wellP = information.getPersonalWell().get(champion).split("&&");
        }
        
        if (!information.getPersonalCombos().isEmpty()) {
            Iterator it0 = information.getPersonalCombos().entrySet().iterator();

            while (it0.hasNext()) {
                Map.Entry pair = (Map.Entry)it0.next();
                if(pair.getValue().toString().contains(champion)) {
                    combosP.add(pair.getKey().toString() + ". " + pair.getValue().toString());
                }
            }
        }
        
        // HERE STARTS THE PRINTING SECTION ////////////////////////////////////
        
        // HEADER //////////////////////////////////////////////////////////////
        /*
        infoTextArea.setText(this.infoTextArea.getText() +
                "*********************** " + champion.toUpperCase() +
                " ********************************************** \n" );
        */
        infoTextArea.setText(this.infoTextArea.getText() +
                "*****************************************************************************\n" +
                "*********************   " + champion.toUpperCase() + "   *********************" +
                "***********************\n" +
                "*****************************************************************************\n\n" );
        

        // TAGS //////////////////////////////////////////////////////////////
        if (tags.equals("")) {
            tags = "No tags available";
        }
        infoTextArea.setText(this.infoTextArea.getText() +
                "TAGS: [ " + tags + " ]" );
        if (!tags.contains("available")) {
            infoTextArea.setText(this.infoTextArea.getText() + "\n");

            if (!hotPosition.equals("")) {
                infoTextArea.setText(this.infoTextArea.getText() + "        >> Hot: " + hotPosition + "\n");
            }

            if (!lovedPosition.equals("")) {
                infoTextArea.setText(this.infoTextArea.getText() + "        >> Loved: " + lovedPosition + "\n");
            }

            if (!hatedPosition.equals("")) {
                infoTextArea.setText(this.infoTextArea.getText() + "        >> Hated: " + hatedPosition + "\n");
            }

            infoTextArea.setText(this.infoTextArea.getText() + "\n");
            
        }
        else {
            infoTextArea.setText(this.infoTextArea.getText() + "\n\n");
        }
 
        
        // STRONG AGAINST //////////////////////////////////////////////////////////////
        infoTextArea.setText(this.infoTextArea.getText() + "STRONG AGAINST:\n" );
        infoTextArea.setText(this.infoTextArea.getText() + "            Community: [ ");
        if (strong != null) {
            for (String str : strong) {
                infoTextArea.setText(this.infoTextArea.getText() + str + ",  ");
            }
        }
        else {
            infoTextArea.setText(this.infoTextArea.getText() + " No community information available ");
        }
        infoTextArea.setText(this.infoTextArea.getText() + " ]\n            >>>\n            Personal: [ ");
        if (strongP != null) {
            for (String str : strongP) {
                infoTextArea.setText(this.infoTextArea.getText() + str + ",  ");
            }
        }
        else {
            infoTextArea.setText(this.infoTextArea.getText() + " No personal information available ");
        }
        infoTextArea.setText(this.infoTextArea.getText() + " ]\n\n");

        
        // WEAK AGAINST //////////////////////////////////////////////////////////////
        infoTextArea.setText(this.infoTextArea.getText() + "WEAK AGAINST:\n" );
        infoTextArea.setText(this.infoTextArea.getText() + "            Community: [ ");
        if (weak != null) {
            for (String we : weak) {
                infoTextArea.setText(this.infoTextArea.getText() + we + ",  ");
            }
        }
        else {
            infoTextArea.setText(this.infoTextArea.getText() + " No community information available ");
        }
        infoTextArea.setText(this.infoTextArea.getText() + " ]\n            >>>\n            Personal: [ ");
        if (weakP != null) {
            for (String we : weakP) {
                infoTextArea.setText(this.infoTextArea.getText() + we + ",  ");
            }
        }
        else {
            infoTextArea.setText(this.infoTextArea.getText() + " No personal information available ");
        }
        infoTextArea.setText(this.infoTextArea.getText() + " ]\n\n");
        
        
        // EVEN AGAINST //////////////////////////////////////////////////////////////
        infoTextArea.setText(this.infoTextArea.getText() + "EVEN AGAINST:\n" );
        infoTextArea.setText(this.infoTextArea.getText() + "            Community: [ ");
        if (even != null) {
            for (String ev : even) {
                infoTextArea.setText(this.infoTextArea.getText() + ev + ",  ");
            }
        }
        else {
            infoTextArea.setText(this.infoTextArea.getText() + "  >> No community information available ");
        }
        infoTextArea.setText(this.infoTextArea.getText() + " ]\n            >>>\n            Personal: [ ");
        if (evenP != null) {
            for (String ev : evenP) {
                infoTextArea.setText(this.infoTextArea.getText() + ev + ",  ");
            }
        }
        else {
            infoTextArea.setText(this.infoTextArea.getText() + " No personal information available ");
        }
        infoTextArea.setText(this.infoTextArea.getText() + "]\n\n");


        // WORKS WELL //////////////////////////////////////////////////////////////
        infoTextArea.setText(this.infoTextArea.getText() + "WORKS WELL WITH:\n" );
        infoTextArea.setText(this.infoTextArea.getText() + "            Community: [ ");
        if (well != null) {
            for (String wll : well) {
                infoTextArea.setText(this.infoTextArea.getText() + wll + ",  ");
            }
        }
        else {
            infoTextArea.setText(this.infoTextArea.getText() + " No community information available ");
        }
        infoTextArea.setText(this.infoTextArea.getText() + " ]\n            >>>\n            Personal: [ ");
        if (wellP != null) {
            for (String wll : wellP) {
                infoTextArea.setText(this.infoTextArea.getText() + wll + ",  ");
            }
        }
        else {
            infoTextArea.setText(this.infoTextArea.getText() + " No personal information available ");
        }
        infoTextArea.setText(this.infoTextArea.getText() + "]\n\n");
        

        // COMBOS //////////////////////////////////////////////////////////////
        //int comboCounter = 1;
        infoTextArea.setText(this.infoTextArea.getText() + "COMBOS WITH [ " + champion + " ]:\n" );
        if (!combosP.isEmpty()) {
            for (String cmb : combosP) {
                infoTextArea.setText(this.infoTextArea.getText() + "            " + cmb + "\n\n");
                //comboCounter++;
            }
        }
        else {
            infoTextArea.setText(this.infoTextArea.getText() + "            No combos available ");
        }
        infoTextArea.setText(this.infoTextArea.getText() + "\n\n");      
      
    }//GEN-LAST:event_infoShowButtonActionPerformed

    private void infoExitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_infoExitButtonActionPerformed
        // TODO add your handling code here:
        int selectedOption = JOptionPane.showConfirmDialog(null,
                                  "Close Information Window?", // Message of the window
                                  "Exiting Information Window", // Message of the header
                                  JOptionPane.YES_NO_OPTION);

        if (selectedOption == JOptionPane.YES_OPTION) {
            //System.gc(); // Release all the resources
            this.dispose();
        }
    }//GEN-LAST:event_infoExitButtonActionPerformed

    private void infoHotOnesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_infoHotOnesButtonActionPerformed
        // TODO add your handling code here:
        
        // HEADER //////////////////////////////////////////////////////////////
        /*
        infoTextArea.setText(this.infoTextArea.getText() +
        "*********************** " + "HOT CHAMPIONS" +
        " ********************************************** \n" );
        */
        infoTextArea.setText(this.infoTextArea.getText() +
                "******************************************************\n" +
                "*********************  HOT ONES  *********************\n" +
                "******************************************************\n" );

        if (!information.getHotOnes().isEmpty()) {
            Iterator it = information.getHotOnes().entrySet().iterator();
            while (it.hasNext()) {
                Map.Entry pair = (Map.Entry)it.next();
                //System.out.println(pair.getKey() + ":" + pair.getValue());
                infoTextArea.setText(this.infoTextArea.getText() + "            >> " + pair.getKey() + 
                        " --> [" + pair.getValue().toString() + "]\n" );
            }
        }
        else {
            infoTextArea.setText(this.infoTextArea.getText() + "            >> No information available" );
        }

        infoTextArea.setText(this.infoTextArea.getText() + "\n\n" );
    }//GEN-LAST:event_infoHotOnesButtonActionPerformed

    private void infoLovedOnesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_infoLovedOnesButtonActionPerformed
        // TODO add your handling code here:
        
        /*
        infoTextArea.setText(this.infoTextArea.getText() +
        "*********************** " + "LOVED CHAMPIONS" +
        " ********************************************** \n" );
        */
        infoTextArea.setText(this.infoTextArea.getText() +
                "******************************************************\n" +
                "********************* LOVED ONES *********************\n" +
                "******************************************************\n" );

        if (!information.getLovedOnes().isEmpty()) {
            Iterator it = information.getLovedOnes().entrySet().iterator();
            while (it.hasNext()) {
                Map.Entry pair = (Map.Entry)it.next();
                infoTextArea.setText(this.infoTextArea.getText() + "            >> " + pair.getKey() +
                        " --> [" + pair.getValue().toString() + "]\n" );
            }
        }
        else {
            infoTextArea.setText(this.infoTextArea.getText() + "            >> No information available" );
        }
        infoTextArea.setText(this.infoTextArea.getText() + "\n\n" );
    }//GEN-LAST:event_infoLovedOnesButtonActionPerformed

    private void infoHatedOnesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_infoHatedOnesButtonActionPerformed
        // TODO add your handling code here:
        
        /*
        infoTextArea.setText(this.infoTextArea.getText() +
        "*********************** " + "HATED CHAMPIONS" +
        " ********************************************** \n" );
        */
        infoTextArea.setText(this.infoTextArea.getText() +
                "******************************************************\n" +
                "********************* HATED ONES *********************\n" +
                "******************************************************\n" );

        if (!information.getHatedOnes().isEmpty()) {
            Iterator it = information.getHatedOnes().entrySet().iterator();
            while (it.hasNext()) {
                Map.Entry pair = (Map.Entry)it.next();
                infoTextArea.setText(this.infoTextArea.getText() + "            >> " + pair.getKey() +
                        " --> [" + pair.getValue().toString() + "]\n" );
            }
        }
        else {
            infoTextArea.setText(this.infoTextArea.getText() + "            >> No information available" );
        }
        
        infoTextArea.setText(this.infoTextArea.getText() + "\n\n" );
    }//GEN-LAST:event_infoHatedOnesButtonActionPerformed

    private void infoCombosButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_infoCombosButtonActionPerformed
        // TODO add your handling code here:
        
        /*
        infoTextArea.setText(this.infoTextArea.getText() +
        "*********************** " + "COMBOS" +
        " ********************************************** \n" );
        */
        
        infoTextArea.setText(this.infoTextArea.getText() +
                "******************************************************\n" +
                "*********************   COMBOS   *********************\n" +
                "******************************************************\n" );
        
        if (!information.getPersonalCombos().isEmpty()) {
            Iterator it = information.getPersonalCombos().entrySet().iterator();
            while (it.hasNext()) {
                Map.Entry pair = (Map.Entry)it.next();
                infoTextArea.setText(this.infoTextArea.getText() + "            " + pair.getKey()
                    + ". " + pair.getValue() + "\n" );
            }
        }
        else {
            infoTextArea.setText(this.infoTextArea.getText() + "            >> No information available" );
        }

        infoTextArea.setText(this.infoTextArea.getText() + "\n\n" );
    }//GEN-LAST:event_infoCombosButtonActionPerformed

    private void infoPositionsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_infoPositionsButtonActionPerformed
        // TODO add your handling code here:
        String hot="";
        String loved="";
        String hated="";
        boolean active = false;
        
        infoTextArea.setText(this.infoTextArea.getText() +
                "******************************************************\n" +
                "*********************  POSITIONS  *********************\n" +
                "******************************************************\n\n" );
        
        // ALL CHAMPIONS IN TOP LANE
        //infoTextArea.setText(this.infoTextArea.getText() + "TOP --->\n");
        //infoTextArea.setText(this.infoTextArea.getText() + "----------------------- TOP "
        //    + "-----------------------\n");
        infoTextArea.setText(this.infoTextArea.getText() + "<--- TOP ---> \n");
        
        if (!information.getHotOnes().isEmpty()) {
            Iterator it = information.getHotOnes().entrySet().iterator();
            while (it.hasNext()) {
                Map.Entry pair = (Map.Entry)it.next();
                if (pair.getValue().toString().contains("Top")) {
                    hot = hot + pair.getKey().toString() + ", ";
                }
            }
        }
        
        if (!information.getLovedOnes().isEmpty()) {
            Iterator it = information.getLovedOnes().entrySet().iterator();
            while (it.hasNext()) {
                Map.Entry pair = (Map.Entry)it.next();
                if (pair.getValue().toString().contains("Top")) {
                    loved = loved + pair.getKey().toString() + ", ";
                }
            }
        }
        
        if (!information.getHatedOnes().isEmpty()) {
            Iterator it = information.getHatedOnes().entrySet().iterator();
            while (it.hasNext()) {
                Map.Entry pair = (Map.Entry)it.next();
                if (pair.getValue().toString().contains("Top")) {
                    hated = hated + pair.getKey().toString() + ", ";
                }
            }
        }
        
        if (!hot.equals("")) {
            infoTextArea.setText(this.infoTextArea.getText() + "        >> Hot: [" + hot + "]\n");
            active=true;
        }
        if (!loved.equals("")) {
            infoTextArea.setText(this.infoTextArea.getText() + "        >> Loved: [" + loved + "]\n");
            active=true;
        }
        if (!hated.equals("")) {
            infoTextArea.setText(this.infoTextArea.getText() + "        >> Hated: [" + hated + "]\n");
            active=true;
        }
        if (active==false){
            infoTextArea.setText(this.infoTextArea.getText() + "        >> No information available \n");
        }
        infoTextArea.setText(this.infoTextArea.getText() + "\n");

        active=false;
        hot = "";
        loved = "";
        hated= "";
        
        // ALL CHAMPIONS IN MID LANE
        //infoTextArea.setText(this.infoTextArea.getText() + "MID: --->\n");
        //infoTextArea.setText(this.infoTextArea.getText() + "----------------------- MID "
        //    + "-----------------------\n");
        infoTextArea.setText(this.infoTextArea.getText() + "<--- MID ---> \n");
        
        if (!information.getHotOnes().isEmpty()) {
            Iterator it = information.getHotOnes().entrySet().iterator();
            while (it.hasNext()) {
                Map.Entry pair = (Map.Entry)it.next();
                if (pair.getValue().toString().contains("Mid")) {
                    hot = hot + pair.getKey().toString() + ", ";
                }
            }
        }
        
        if (!information.getLovedOnes().isEmpty()) {
            Iterator it = information.getLovedOnes().entrySet().iterator();
            while (it.hasNext()) {
                Map.Entry pair = (Map.Entry)it.next();
                if (pair.getValue().toString().contains("Mid")) {
                    loved = loved + pair.getKey().toString() + ", ";
                }
            }
        }
        
        if (!information.getHatedOnes().isEmpty()) {
            Iterator it = information.getHatedOnes().entrySet().iterator();
            while (it.hasNext()) {
                Map.Entry pair = (Map.Entry)it.next();
                if (pair.getValue().toString().contains("Mid")) {
                    hated = hated + pair.getKey().toString() + ", ";
                }
            }
        }
        
        if (!hot.equals("")) {
            infoTextArea.setText(this.infoTextArea.getText() + "        >> Hot: [" + hot + "]\n");
            active=true;
        }
        if (!loved.equals("")) {
            infoTextArea.setText(this.infoTextArea.getText() + "        >> Loved: [" + loved + "]\n");
            active=true;
        }
        if (!hated.equals("")) {
            infoTextArea.setText(this.infoTextArea.getText() + "        >> Hated: [" + hated + "]\n");
            active=true;
        }
        if (active==false){
            infoTextArea.setText(this.infoTextArea.getText() + "        >> No information available \n");
        }
        infoTextArea.setText(this.infoTextArea.getText() + "\n");
        active=false;
        hot = "";
        loved = "";
        hated= "";
        
        // ALL CHAMPIONS IN THE JUNGLE
        //infoTextArea.setText(this.infoTextArea.getText() + "JUNGLE: --->\n");
        //infoTextArea.setText(this.infoTextArea.getText() + "----------------------- JUNGLE "
        //    + "-----------------------\n");
        infoTextArea.setText(this.infoTextArea.getText() + "<--- JUNGLE ---> \n");
        
        if (!information.getHotOnes().isEmpty()) {
            Iterator it = information.getHotOnes().entrySet().iterator();
            while (it.hasNext()) {
                Map.Entry pair = (Map.Entry)it.next();
                if (pair.getValue().toString().contains("Jungle")) {
                    hot = hot + pair.getKey().toString() + ", ";
                }
            }
        }
        
        if (!information.getLovedOnes().isEmpty()) {
            Iterator it = information.getLovedOnes().entrySet().iterator();
            while (it.hasNext()) {
                Map.Entry pair = (Map.Entry)it.next();
                if (pair.getValue().toString().contains("Jungle")) {
                    loved = loved + pair.getKey().toString() + ", ";
                }
            }
        }
        
        if (!information.getHatedOnes().isEmpty()) {
            Iterator it = information.getHatedOnes().entrySet().iterator();
            while (it.hasNext()) {
                Map.Entry pair = (Map.Entry)it.next();
                if (pair.getValue().toString().contains("Jungle")) {
                    hated = hated + pair.getKey().toString() + ", ";
                }
            }
        }
        
        if (!hot.equals("")) {
            infoTextArea.setText(this.infoTextArea.getText() + "        >> Hot: [" + hot + "]\n");
            active=true;
        }
        if (!loved.equals("")) {
            infoTextArea.setText(this.infoTextArea.getText() + "        >> Loved: [" + loved + "]\n");
            active=true;
        }
        if (!hated.equals("")) {
            infoTextArea.setText(this.infoTextArea.getText() + "        >> Hated: [" + hated + "]\n");
            active=true;
        }
        if (active==false){
            infoTextArea.setText(this.infoTextArea.getText() + "        >> No information available \n");
        }
        infoTextArea.setText(this.infoTextArea.getText() + "\n");
        active=false;
        hot = "";
        loved = "";
        hated= "";
        
        // ALL CHAMPIONS IN BOT LANE AS ADC
        //infoTextArea.setText(this.infoTextArea.getText() + "ADC: --->\n");
        //infoTextArea.setText(this.infoTextArea.getText() + "----------------------- ADC "
        //    + "-----------------------\n");
        infoTextArea.setText(this.infoTextArea.getText() + "<--- ADC ---> \n");
        
        if (!information.getHotOnes().isEmpty()) {
            Iterator it = information.getHotOnes().entrySet().iterator();
            while (it.hasNext()) {
                Map.Entry pair = (Map.Entry)it.next();
                if (pair.getValue().toString().contains("ADC")) {
                    hot = hot + pair.getKey().toString() + ", ";
                }
            }
        }
        
        if (!information.getLovedOnes().isEmpty()) {
            Iterator it = information.getLovedOnes().entrySet().iterator();
            while (it.hasNext()) {
                Map.Entry pair = (Map.Entry)it.next();
                if (pair.getValue().toString().contains("ADC")) {
                    loved = loved + pair.getKey().toString() + ", ";
                }
            }
        }
        
        if (!information.getHatedOnes().isEmpty()) {
            Iterator it = information.getHatedOnes().entrySet().iterator();
            while (it.hasNext()) {
                Map.Entry pair = (Map.Entry)it.next();
                if (pair.getValue().toString().contains("ADC")) {
                    hated = hated + pair.getKey().toString() + ", ";
                }
            }
        }
        
        if (!hot.equals("")) {
            infoTextArea.setText(this.infoTextArea.getText() + "        >> Hot: [" + hot + "]\n");
            active=true;
        }
        if (!loved.equals("")) {
            infoTextArea.setText(this.infoTextArea.getText() + "        >> Loved: [" + loved + "]\n");
            active=true;
        }
        if (!hated.equals("")) {
            infoTextArea.setText(this.infoTextArea.getText() + "        >> Hated: [" + hated + "]\n");
            active=true;
        }
        if (active==false){
            infoTextArea.setText(this.infoTextArea.getText() + "        >> No information available \n");
        }
        infoTextArea.setText(this.infoTextArea.getText() + "\n");
        active=false;
        hot = "";
        loved = "";
        hated= "";
        
        // ALL CHAMPIONS IN BOT LANE AS SUPPORT
        //infoTextArea.setText(this.infoTextArea.getText() + "SUPPORT: --->\n");
        //infoTextArea.setText(this.infoTextArea.getText() + "----------------------- SUPPORT "
        //    + "-----------------------\n");
        infoTextArea.setText(this.infoTextArea.getText() + "<--- SUPPORT ---> \n");
        
        if (!information.getHotOnes().isEmpty()) {
            Iterator it = information.getHotOnes().entrySet().iterator();
            while (it.hasNext()) {
                Map.Entry pair = (Map.Entry)it.next();
                if (pair.getValue().toString().contains("Support")) {
                    hot = hot + pair.getKey().toString() + ", ";
                }
            }
        }
        
        if (!information.getLovedOnes().isEmpty()) {
            Iterator it = information.getLovedOnes().entrySet().iterator();
            while (it.hasNext()) {
                Map.Entry pair = (Map.Entry)it.next();
                if (pair.getValue().toString().contains("Support")) {
                    loved = loved + pair.getKey().toString() + ", ";
                }
            }
        }
        
        if (!information.getHatedOnes().isEmpty()) {
            Iterator it = information.getHatedOnes().entrySet().iterator();
            while (it.hasNext()) {
                Map.Entry pair = (Map.Entry)it.next();
                if (pair.getValue().toString().contains("Support")) {
                    hated = hated + pair.getKey().toString() + ", ";
                }
            }
        }
        
        if (!hot.equals("")) {
            infoTextArea.setText(this.infoTextArea.getText() + "        >> Hot: [" + hot + "]\n");
            active=true;
        }
        if (!loved.equals("")) {
            infoTextArea.setText(this.infoTextArea.getText() + "        >> Loved: [" + loved + "]\n");
            active=true;
        }
        if (!hated.equals("")) {
            infoTextArea.setText(this.infoTextArea.getText() + "        >> Hated: [" + hated + "]\n");
            active=true;
        }
        if (active==false){
            infoTextArea.setText(this.infoTextArea.getText() + "        >> No information available \n");
        }
                
        infoTextArea.setText(this.infoTextArea.getText() + "\n\n");
    }//GEN-LAST:event_infoPositionsButtonActionPerformed

    /**
    * @param args the command line arguments
    */

    
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //Info_UI().setVisible(true);
                this.run();
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox infoComboBox;
    private javax.swing.JButton infoCombosButton;
    private javax.swing.JButton infoExitButton;
    private javax.swing.JButton infoHatedOnesButton;
    private javax.swing.JButton infoHotOnesButton;
    private javax.swing.JButton infoLovedOnesButton;
    private javax.swing.JButton infoPositionsButton;
    private javax.swing.JButton infoShowButton;
    private javax.swing.JTextArea infoTextArea;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

}
